<?php
/**
 * @file
 * Main procedural code for the Mailmute module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_mail_alter().
 *
 * This hook is where the muting happens. For every outgoing mail it looks up
 * the Send State of the receiving address. If the state is muting, the message
 * is suppressed.
 *
 * Suppression is done by setting @code $message['send'] @endcode to @code FALSE
 * @endcode, so it could possibly later be "unsuppressed" by another module.
 */
function mailmute_mail_alter(&$message) {
  // @todo Also check Cc, Bcc.
  // The 'to' element is a string, even with multiple recipients.
  // @todo split based on RFC
  // @todo consider all observed formats incl Name <email>
  // @todo if multiple targets and some removed, add header X-Mailmute-To-Remove
  $state = \Drupal::service('plugin.manager.sendstate')->getState($message['to']);
  if (isset($state) && $state->isMute()) {
    $message['send'] = FALSE;
    drupal_set_message(t('Message to %mail suppressed.', array('%mail' => $message['to'])), 'warning');
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 *
 * Hides the send state field unless user has access.
 */
function mailmute_user_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $user = \Drupal::currentUser();
  $build['field_sendstate']['#access'] = $user->hasPermission('administer send state') || ($user->id() == $entity->id() && $user->hasPermission('change own send state'));
}
